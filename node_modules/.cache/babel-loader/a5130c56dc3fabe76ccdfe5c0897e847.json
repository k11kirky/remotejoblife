{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport * as Parser from \"rss-parser\";\nimport thunk from \"redux-thunk\";\nvar exampleInitialState = {\n  jobs: []\n};\nexport var actionTypes = {\n  JOBS: \"JOBS\"\n};\nvar CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\"; // REDUCERS\n\nexport var reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.JOBS:\n      console.log(action);\n      console.log(\"here\");\n      return _Object$assign({}, state, {\n        lastUpdate: action.jobs\n      });\n\n    default:\n      return state;\n  }\n}; // ACTIONS\n\nexport var getJobs = function getJobs() {\n  return function (dispatch) {\n    var parser = new Parser();\n    return parser.parseURL(CORS_PROXY + \"https://weworkremotely.com/categories/remote-customer-support-jobs.rss\").then(function (feed) {\n      console.log(feed);\n      dispatch({\n        type: actionTypes.JOBS,\n        jobs: feed.items\n      });\n    });\n  };\n};\nexport function initializeStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : exampleInitialState;\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunk)));\n}","map":{"version":3,"sources":["/Users/k11kirky/Dev/remotejoblife-fe/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","Parser","thunk","exampleInitialState","jobs","actionTypes","JOBS","CORS_PROXY","reducer","state","action","type","console","log","lastUpdate","getJobs","dispatch","parser","parseURL","then","feed","items","initializeStore","initialState"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAO,KAAKC,MAAZ,MAAwB,YAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,IAAI,EAAE;AADoB,CAA5B;AAIA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,IAAI,EAAE;AADmB,CAApB;AAIP,IAAMC,UAAU,GAAG,sCAAnB,C,CAEA;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAyC;AAAA,MAAxCC,KAAwC,uEAAhCN,mBAAgC;AAAA,MAAXO,MAAW;;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAW,CAACC,IAAjB;AACEM,MAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,aAAO,eAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC9BK,QAAAA,UAAU,EAAEJ,MAAM,CAACN;AADW,OAAzB,CAAP;;AAGF;AACE,aAAOK,KAAP;AARJ;AAUD,CAXM,C,CAaP;;AACA,OAAO,IAAMM,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,SAAO,UAAAC,QAAQ,EAAI;AACjB,QAAIC,MAAM,GAAG,IAAIhB,MAAJ,EAAb;AACA,WAAOgB,MAAM,CACVC,QADI,CAEHX,UAAU,GACR,wEAHC,EAKJY,IALI,CAKC,UAAAC,IAAI,EAAI;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;AACAJ,MAAAA,QAAQ,CAAC;AAAEL,QAAAA,IAAI,EAAEN,WAAW,CAACC,IAApB;AAA0BF,QAAAA,IAAI,EAAEgB,IAAI,CAACC;AAArC,OAAD,CAAR;AACD,KARI,CAAP;AASD,GAXD;AAYD,CAbM;AAeP,OAAO,SAASC,eAAT,GAA6D;AAAA,MAApCC,YAAoC,uEAArBpB,mBAAqB;AAClE,SAAOL,WAAW,CAChBU,OADgB,EAEhBe,YAFgB,EAGhBvB,mBAAmB,CAACD,eAAe,CAACG,KAAD,CAAhB,CAHH,CAAlB;AAKD","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport * as Parser from \"rss-parser\";\nimport thunk from \"redux-thunk\";\n\nconst exampleInitialState = {\n  jobs: []\n};\n\nexport const actionTypes = {\n  JOBS: \"JOBS\"\n};\n\nconst CORS_PROXY = \"https://cors-anywhere.herokuapp.com/\";\n\n// REDUCERS\nexport const reducer = (state = exampleInitialState, action) => {\n  switch (action.type) {\n    case actionTypes.JOBS:\n      console.log(action);\n      console.log(\"here\");\n      return Object.assign({}, state, {\n        lastUpdate: action.jobs\n      });\n    default:\n      return state;\n  }\n};\n\n// ACTIONS\nexport const getJobs = () => {\n  return dispatch => {\n    let parser = new Parser();\n    return parser\n      .parseURL(\n        CORS_PROXY +\n          \"https://weworkremotely.com/categories/remote-customer-support-jobs.rss\"\n      )\n      .then(feed => {\n        console.log(feed);\n        dispatch({ type: actionTypes.JOBS, jobs: feed.items });\n      });\n  };\n};\n\nexport function initializeStore(initialState = exampleInitialState) {\n  return createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n}\n"]},"metadata":{},"sourceType":"module"}